

Function Get-VulnerabilityRSSFeed { 

<#
.SYNOPSIS 
Retrieves items from RSS feed(s) to create tecnhical vulnerability items. 
.DESCRIPTION
Invokes request to specified URIs to retrieve information from Microsoft Security Bulletin and/or the National Vulnerability Database (NVD) that have been created in the timespan specified.
This function requires Windows PowerShell 3.0. 
.PARAMETER Days
Specify the number of days in the past to retrive items in the RSS feed based on the published date. The current RSS feed for the National Vulnerability Database (NVD) contains only an eight day window for retrieving information. 
.PARAMETER Microsoft
Specifies switch parameter to retrieve information from the Microsoft Security Bulletin RSS feed.
.PARAMETER NVD
Specifies switch parameter to retrieve information from the National Vulnerability Database RSS feed. 
.PARAMETER Keywords
Specify search criteria to filter retrieved items based on the title of the item containing the keyword(s). 
.EXAMPLE 
PS C:> Get-VulnerabilityRSSFeed -Microsoft -NVD
This command retrieves items from the Microsoft Security Bulletin and National Vulnerability Database which have been publised in the past day. 
.EXAMPLE 
PS C:> Get-VulnerabilityRSSFeed -Days 30 -Microsoft 
This command retrieves items from the Microsoft Security Bulletin which have been publised in the past 30 days.
PS C:> Get-VulnerabilityRSSFeed -Microsoft -NVD | Export-CSV C:\RSS\RSS.csv -NoTypeInformation
This command retrieves items from the Microsoft Security Bulletin and National Vulnerability Database which have been publised in the past days and exports to the CSV file C:\RSS\RSS.csv 
.NOTES 
Author:          Dean Grant
Date:            Thursday, 12th November 2015
Version:         1.0
Keywords:        Vulnerability, RSS
.LINK
GitHub: https://github.com/dean1609/PowerShell/blob/master/Functions/Get-VulnerabilityRSSFeed.ps1
Blog: 
#> 

[CmdletBinding()]
Param (
    [String] $Days = "1",
    [Switch] $Microsoft,
    [Switch] $NVD,
    $Keywords = "Ubuntu|MySQL"
    ) 

Begin 
    {
    # Conditional logic to determine compatable version of Windows PowerShell.
    If ($PSVersionTable.PSVersion.Major -lt "3")
        {
        Write-Host "The function requires a minimum of Windows PowerShell 3.0" -ForegroundColor Red
        [Environment]::Exit("1")
        } # If 
    # Retrieves the data and time to retrive items from the RSS feed.
    $Date = (Get-Date (Get-Date).AddDays(-$Days) -Format s)
    } # Begin 

Process 
    {
    Try 
        {
        # Conditional logic to determine if the switch to retrieve information from the Microsoft Security Bulletin RSS feed has been specified.
        If ($Microsoft)
            {  
            # Retrieves content from the Microsoft Security Bulletin RSS feed. 
            [xml]$WebRequest = Invoke-WebRequest –Uri https://technet.microsoft.com/en-us/security/rss/bulletin 
            # Selects objects retrieved where the published date is greater or equal to the timespan speficied.
            $Items = $WebRequest.rss.channel.item | Where-Object {$_.pubDate -ge "$Date"}
            # Performs action on each item returned to calculate expressions for output object. 
            ForEach ($Item in $Items)
                {
                "" | Select-Object @{N="Title";E={(($Item.title -split ": ")[1] -split " - ")[0]}},@{N="PublishedDate";E={Get-Date ($Item.pubDate) -Format d}},@{N="Source";E={"Microsoft Security Bulletin"}},
                @{N="Description";E={($Item.InnerText -split "Summary: ")[1]}}, @{N="Link";E={$Item.link}},@{N="Severity";E={(($Item.title -split " - ") -split ":")[1]}}
                } # ForEach
            } # If 
        # Conditional logic to determine if the switch to retrieve information from the National Vulnerability RSS feed has been specified.
        If ($NVD)
            { 
            # Retrieves content from the National Vulnerability Database RSS Feed.
            [xml]$WebRequest = Invoke-WebRequest –Uri  https://nvd.nist.gov/download/nvd-rss.xml            
            # Selects objects retrieved where the published date is greater or equal to the timespan speficied.
            $Items = $WebRequest.rdf.item | Where-Object {$_.Date -ge "$Date"} 
            # Performs action on each item returned to calculate expressions for output object. 
            ForEach ($Item in $Items)
                {
                # Conditional logic to determine if the item returned matches one of the keyword values. 
                If ($Item.InnerText -match $Keywords)
                    {
                    "" | Select-Object @{N="Title";E={$Item.title}},@{N="PublishedDate";E={Get-Date ($Item.Date) -Format d}},@{N="Source";E={"National Vulnerability Database "}},@{N="Description";E={$Item.description}},@{N="Link";E={$Item.link}},
                    @{N="Severity";E={""}}
                    } # If 
               } # ForEach 
            } # If 
        } # Try 
    Catch
        {
        # Returns error exception message and exits.
        Write-Host ("Failed to retrieve items with the following exception: " + $Error.Exception.Message[0]) -ForegroundColor Red 
        #[Environment]::Exit("1"); # returns exit code as Environment.Exit.Method class.  
        Break
        } # Catch 
    } #Process 
 
 End 
    {
    #[Environment]::Exit("0"); # returns exit code as Environment.Exit.Method class.  
    } # End  

 } # Function 
